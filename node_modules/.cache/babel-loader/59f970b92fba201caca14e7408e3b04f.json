{"ast":null,"code":"import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\n\nfunction create(createState) {\n  let state;\n  const listeners = new Set();\n\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (nextState !== state) {\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(listener => listener(state));\n    }\n  };\n\n  const getState = () => state;\n\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    let currentSlice = selector(state);\n\n    function listenerToAdd() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = selector(state);\n\n        if (!equalityFn(currentSlice, newStateSlice)) {\n          listener(currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        listener(null, error);\n      }\n    }\n\n    listeners.add(listenerToAdd); // Unsubscribe\n\n    return () => listeners.delete(listenerToAdd);\n  };\n\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n\n    listeners.add(listener); // Unsubscribe\n\n    return () => listeners.delete(listener);\n  };\n\n  const destroy = () => listeners.clear();\n\n  const api = {\n    setState,\n    getState,\n    subscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create$1(createState) {\n  const api = typeof createState === 'function' ? create(createState) : createState;\n\n  const useStore = (selector = api.getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const currentSliceRef = useRef();\n    const selectorRef = useRef(selector);\n    const equalityFnRef = useRef(equalityFn);\n    const erroredRef = useRef(false);\n    const state = api.getState();\n\n    if (currentSliceRef.current === undefined) {\n      currentSliceRef.current = selector(state);\n    }\n\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    const stateBeforeSubscriptionRef = useRef(state);\n    useEffect(() => {\n      const listener = () => {\n        try {\n          const nextStateSlice = selectorRef.current(api.getState());\n\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n\n      const unsubscribe = api.subscribe(listener);\n\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener(); // state has changed before subscription\n      }\n\n      return unsubscribe;\n    }, []);\n    return hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n  };\n\n  Object.assign(useStore, api); // For backward compatibility (No TS types for this)\n\n  useStore[Symbol.iterator] = function* () {\n    console.warn('[useStore, api] = create() is deprecated and will be removed in v4');\n    yield useStore;\n    yield api;\n  };\n\n  return useStore;\n}\n\nexport default create$1;","map":{"version":3,"sources":["/Users/satishp/Projects/demo3d/node_modules/zustand/index.js"],"names":["useReducer","useRef","useEffect","useLayoutEffect","create","createState","state","listeners","Set","setState","partial","replace","nextState","Object","assign","forEach","listener","getState","subscribeWithSelector","selector","equalityFn","is","currentSlice","listenerToAdd","newStateSlice","error","add","delete","subscribe","destroy","clear","api","useIsoLayoutEffect","window","create$1","useStore","forceUpdate","c","currentSliceRef","selectorRef","equalityFnRef","erroredRef","current","undefined","hasNewStateSlice","stateBeforeSubscriptionRef","nextStateSlice","unsubscribe","Symbol","iterator","console","warn"],"mappings":"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","sourcesContent":["import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\n\nfunction create(createState) {\n  let state;\n  const listeners = new Set();\n\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (nextState !== state) {\n      state = replace ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach(listener => listener(state));\n    }\n  };\n\n  const getState = () => state;\n\n  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {\n    let currentSlice = selector(state);\n\n    function listenerToAdd() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        const newStateSlice = selector(state);\n\n        if (!equalityFn(currentSlice, newStateSlice)) {\n          listener(currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        listener(null, error);\n      }\n    }\n\n    listeners.add(listenerToAdd); // Unsubscribe\n\n    return () => listeners.delete(listenerToAdd);\n  };\n\n  const subscribe = (listener, selector, equalityFn) => {\n    if (selector || equalityFn) {\n      return subscribeWithSelector(listener, selector, equalityFn);\n    }\n\n    listeners.add(listener); // Unsubscribe\n\n    return () => listeners.delete(listener);\n  };\n\n  const destroy = () => listeners.clear();\n\n  const api = {\n    setState,\n    getState,\n    subscribe,\n    destroy\n  };\n  state = createState(setState, getState, api);\n  return api;\n}\n\nconst useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\nfunction create$1(createState) {\n  const api = typeof createState === 'function' ? create(createState) : createState;\n\n  const useStore = (selector = api.getState, equalityFn = Object.is) => {\n    const forceUpdate = useReducer(c => c + 1, 0)[1];\n    const currentSliceRef = useRef();\n    const selectorRef = useRef(selector);\n    const equalityFnRef = useRef(equalityFn);\n    const erroredRef = useRef(false);\n    const state = api.getState();\n\n    if (currentSliceRef.current === undefined) {\n      currentSliceRef.current = selector(state);\n    }\n\n    let newStateSlice;\n    let hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(() => {\n      if (hasNewStateSlice) {\n        currentSliceRef.current = newStateSlice;\n      }\n\n      selectorRef.current = selector;\n      equalityFnRef.current = equalityFn;\n      erroredRef.current = false;\n    });\n    const stateBeforeSubscriptionRef = useRef(state);\n    useEffect(() => {\n      const listener = () => {\n        try {\n          const nextStateSlice = selectorRef.current(api.getState());\n\n          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {\n            currentSliceRef.current = nextStateSlice;\n            forceUpdate();\n          }\n        } catch (error) {\n          erroredRef.current = true;\n          forceUpdate();\n        }\n      };\n\n      const unsubscribe = api.subscribe(listener);\n\n      if (api.getState() !== stateBeforeSubscriptionRef.current) {\n        listener(); // state has changed before subscription\n      }\n\n      return unsubscribe;\n    }, []);\n    return hasNewStateSlice ? newStateSlice : currentSliceRef.current;\n  };\n\n  Object.assign(useStore, api); // For backward compatibility (No TS types for this)\n\n  useStore[Symbol.iterator] = function* () {\n    console.warn('[useStore, api] = create() is deprecated and will be removed in v4');\n    yield useStore;\n    yield api;\n  };\n\n  return useStore;\n}\n\nexport default create$1;\n"]},"metadata":{},"sourceType":"module"}